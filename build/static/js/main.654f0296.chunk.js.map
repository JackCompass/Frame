{"version":3,"sources":["serviceWorkerRegistration.js","firebase.js","Tasks.jsx","Form.jsx","Navbar.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","db","database","provider","GoogleAuthProvider","useStyles","makeStyles","root","maxWidth","margin","minWidth","media","height","Tasks","id","task","status","classes","user","useContext","userAPI","Card","className","CardActionArea","CardMedia","image","title","CardContent","onClick","event","target","style","textDecoration","Typography","gutterBottom","variant","component","CardActions","Button","ref","uid","child","update","document","getElementById","size","color","remove","theme","form","marginTop","spacing","marginBottom","display","justifyContent","input","marginRight","gridContainer","flexWrap","Form","useState","setTask","item","setItem","useEffect","on","data","prevState","key","val","i","length","splice","autoComplete","onSubmit","preventDefault","push","timestamp","ServerValue","TIMESTAMP","alert","value","TextField","label","onChange","disabled","type","map","todo","flexGrow","navbar","backgroundImage","createContext","Navbar","setUser","cleanup","onAuthStateChanged","usr","AppBar","position","Toolbar","IconButton","signOut","message","signInWithPopup","result","Avatar","alt","src","photoURL","AccountCircle","Provider","App","rootElement","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.654f0296.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\n\nconst firebaseConfig = {\n\tapiKey: \"AIzaSyCRRVLfkNwEKbZcbjXD_R-LdzvbOpTA_CY\",\n\tauthDomain: \"todoist-todo.firebaseapp.com\",\n\tdatabaseURL: \"https://todoist-todo-default-rtdb.asia-southeast1.firebasedatabase.app\",\n\tprojectId: \"todoist-todo\",\n\tstorageBucket: \"todoist-todo.appspot.com\",\n\tmessagingSenderId: \"438637651897\",\n\tappId: \"1:438637651897:web:3a1ccbf3631b9d8300f868\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst auth = firebase.auth();\nconst db = firebase.database();\nvar provider = new firebase.auth.GoogleAuthProvider();\n\nexport {auth, provider, db};","import React, { useContext } from \"react\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Card, makeStyles } from \"@material-ui/core\";\nimport { db } from './firebase';\nimport { userAPI } from './Navbar';\n\nconst useStyles = makeStyles({\n\troot: {\n\t\tmaxWidth: 290,\n\t\tmargin: \"5px 5px\",\n\t\tminWidth: 290,\n\n\t},\n\tmedia: {\n\t\theight: 140\n\t}\n});\n\nconst Tasks = ({ id, task, status }) => {\n\n\tconst classes = useStyles();\n\tconst user = useContext(userAPI);\n\n\tconst removeTask = () => {\n\t\tdb.ref('users/' + user.uid).child(id).remove();\n\t}\n\n\tconst taskCompleted = (event) => {\n\t\tdb.ref('users/' + user.uid).child(id).update({\n\t\t\tstatus: 'completed',\n\t\t})\n\t\tdocument.getElementById(id).style.textDecoration = 'line-through';\n\t}\n\n\tconst singleTask = (event) => {\n\t\tevent.target.style.textDecoration = \"line-through\";\n\t}\n\n\treturn (\n\t\t<Card className={classes.root}>\n\t\t\t<CardActionArea>\n\t\t\t\t<CardMedia\n\t\t\t\t\tclassName={classes.media}\n\t\t\t\t\timage=\"https://source.unsplash.com/1600x900/?programming,coding,laptop,\"\n\t\t\t\t\ttitle=\"Contemplative Reptile\"\n\t\t\t\t/>\n\t\t\t\t<CardContent id = {id} onClick={singleTask}>\n\t\t\t\t\t{status === \"pending\" ? (\n\t\t\t\t\t\t<Typography gutterBottom variant=\"subtitle1\" component=\"h2\">\n\t\t\t\t\t\t\t{task}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Typography style={{textDecoration: \"line-through\"}}gutterBottom variant=\"subtitle1\" component=\"h2\">\n\t\t\t\t\t\t\t{task}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{/* <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n\t\t\t\t\t\t\n\t\t\t\t\t</Typography> */}\n\t\t\t\t</CardContent>\n\t\t\t</CardActionArea>\n\t\t\t<CardActions>\n\t\t\t\t<Button onClick={taskCompleted} size=\"small\" color=\"primary\">\n\t\t\t\t\tFinished\n\t\t\t\t</Button>\n\t\t\t\t<Button onClick={removeTask} size=\"small\" color=\"primary\">\n\t\t\t\t\tDelete\n\t\t\t\t</Button>\n\t\t\t</CardActions>\n\t\t</Card>\n\t);\n}\n\nexport default Tasks;","import { Button, makeStyles, TextField } from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { db } from './firebase';\nimport firebase from 'firebase';\nimport { userAPI } from './Navbar';\nimport Tasks from \"./Tasks\";\n\nconst useStyles = makeStyles((theme) => ({\n\tform: {\n\t\tmarginTop: theme.spacing(3),\n\t\tmarginBottom: theme.spacing(3),\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"center\",\n\t},\n\tinput: {\n\t\tmarginRight: theme.spacing(1)\n\t},\n\tgridContainer: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"space-evenly\",\n\t\tflexWrap: \"wrap\",\n\t},\n}));\n\nconst Form = () => {\n\tconst classes = useStyles();\n\n\t// task is the variable to storet the current input task which user wants to add.\n\tconst [task, setTask] = useState('');\n\n\t// item is the list of all the task which user has already added in the database.\n\tconst [item, setItem] = useState([]);\n\n\tconst user = useContext(userAPI);\n\n\tconst addTask = (event) => {\n\t\t// Preventing the reloading of page on form submission.\n\t\tevent.preventDefault();\n\n\t\t// Checking weather the user is logged in or not\n\t\tif (user) {\n\t\t\t// Using firebase database instance to insert the data into the RTDB.\n\t\t\t// https://firebase.google.com/docs/reference/js/firebase.User\n\t\t\tdb.ref('users/' + user.uid).push({\n\t\t\t\t// https://firebase.google.com/docs/reference/node/firebase.database.ServerValue\n\t\t\t\ttimestamp: firebase.database.ServerValue.TIMESTAMP,\n\t\t\t\titem: task,\n\t\t\t\tstatus: \"pending\",\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\t// Asking them to login \n\t\t\talert(\"Please login before adding Task\");\n\t\t}\n\t\tdocument.getElementById('basic-outlined').value = '';\n\t\tsetTask('');\n\n\t}\n\n\tuseEffect(() => {\n\n\t\t// Now here first we check weather the user is logged in or not.\n\t\tif (user) {\n\t\t\t// If the user is logged in.\n\t\t\tdb.ref(\"users/\" + user.uid).on('child_added', (data) => {\n\t\t\t\tsetItem((prevState) => {\n\t\t\t\t\treturn [...prevState, {\n\t\t\t\t\t\tkey: data.key,\n\t\t\t\t\t\titem: data.val().item,\n\t\t\t\t\t\tstatus : data.val().status,\n\t\t\t\t\t}];\n\t\t\t\t});\n\t\t\t})\n\n\t\t\tdb.ref(\"users/\" + user.uid).on('child_removed', (data) => {\n\t\t\t\t// Here we have to remove the object from the item list.\n\t\t\t\tsetItem((prevState) => {\n\t\t\t\t\tfor (let i = 0; i < prevState.length; i++) {\n\t\t\t\t\t\tif (prevState[i].key === data.key) {\n\t\t\t\t\t\t\tprevState.splice(i, i + 1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn [...prevState];\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}, [user])\n\n\treturn (\n\t\t<>\n\t\t\t<form className={classes.form} autoComplete=\"off\" onSubmit={addTask}>\n\t\t\t\t<TextField\n\t\t\t\t\tclassName={classes.input}\n\t\t\t\t\tid=\"basic-outlined\"\n\t\t\t\t\tlabel=\"Task\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tonChange={(event) => { setTask(event.target.value) }}\n\t\t\t\t/>\n\t\t\t\t<Button disabled={!task} type=\"submit\" variant=\"contained\" color=\"textSecondary\">Add Task</Button>\n\t\t\t</form>\n\t\t\t<div className={classes.gridContainer}>\n\t\t\t\t{item.map((todo) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Tasks\n\t\t\t\t\t\t\tkey={todo.key}\n\t\t\t\t\t\t\tid={todo.key}\n\t\t\t\t\t\t\ttask={todo.item}\n\t\t\t\t\t\t\tstatus = {todo.status}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Form;\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { AppBar, Avatar, IconButton, makeStyles, Toolbar, Typography } from \"@material-ui/core\";\nimport { AccountCircle } from \"@material-ui/icons\";\nimport { auth, provider } from './firebase';\nimport Form from \"./Form\";\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tflexGrow: 1,\n\t\tmarginBottom: \"5px\",\n\t\tdisplay: 'flex',\n\t},\n\ttitle: {\n\t\tflexGrow: 1\n\t},\n\tnavbar: {\n\t\tbackgroundImage: \"linear-gradient(to right, green , yellow)\"\n\t}\n}));\n\n\n// creating a context API \nconst userAPI = createContext();\n\n\nconst Navbar = () => {\n\tconst classes = useStyles();\n\tconst [user, setUser] = useState(null);\n\n\tconst myauth = () => {\n\t\tif (!user) {\n\t\t\tauth.signInWithPopup(provider).then((result) => {\n\t\t\t\tlet user = result.user;\n\t\t\t\tsetUser(user);\n\t\t\t\t\n\t\t\t}).catch((error) => {\n\t\t\t\t// showing the error message via alert to the user.\n\t\t\t\talert(error.message);\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tauth.signOut().then(() => {\n\t\t\t\talert(\"You have successfully logged out.\");\n\t\t\t\tsetUser(null);\n\t\t\t}).catch((error) => {\n\t\t\t\talert(error.message);\n\t\t\t})\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tconst cleanup = auth.onAuthStateChanged((usr) => {\n\t\t\tif (usr) {\n\t\t\t\tsetUser(usr);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetUser(null);\n\t\t\t}\n\t\t})\n\t\treturn () => {\n\t\t\tcleanup()\n\t\t}\n\t}, [])\n\n\treturn (\n\t\t<>\n\t\t\t<div className={classes.root}>\n\t\t\t\t<AppBar position=\"static\" className={classes.navbar}>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Typography variant=\"h5\" className={classes.title}>\n\t\t\t\t\t\t\tSwiss\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\taria-label=\"account of current user\"\n\t\t\t\t\t\t\taria-controls=\"menu-appbar\"\n\t\t\t\t\t\t\taria-haspopup=\"true\"\n\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\tonClick={myauth}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{user ? (<Avatar alt=\"Remy Sharp\" src={user.photoURL} />) : (<AccountCircle />)}\n\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t</div>\n\t\t\t{/* Creating a context provider */}\n\t\t\t<userAPI.Provider value={user}>\n\t\t\t\t<Form />\n\t\t\t</userAPI.Provider>\n\n\t\t</>\n\t);\n};\n\nexport default Navbar;\nexport {userAPI};\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport './App.css';\n\nconst App = () => {\n\treturn (\n\t\t<>\n\t\t\t<Navbar />\n\t\t</>\n\t);\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}